import type { AnimationCallbacks, AnimationTransition, EasingFunction } from './animation-interface.js';
export declare const mapTransitionToMotion: (mercuryTransition?: AnimationTransition, callbacks?: AnimationCallbacks) => {
    onBegin?: () => void;
    onComplete?: () => void;
    onUpdate?: (value: any) => void;
    onRender?: () => void;
    onLoop?: () => void;
    duration: number | undefined;
    autoplay: boolean | undefined;
    delay: number | undefined;
    ease: EasingFunction | EasingFunction[] | undefined;
    repeat: number | undefined;
    repeatType: "loop" | "reverse" | "mirror" | undefined;
    repeatDelay: number | undefined;
    type: "decay" | "spring" | "keyframes" | "tween" | "inertia" | undefined;
    stiffness: number;
    damping: number;
    mass: number;
    velocity: number | undefined;
};
export declare const mapTransitionToAnimeJS: (mercuryTransition?: AnimationTransition, callbacks?: AnimationCallbacks) => {
    onBegin?: () => void;
    onComplete?: () => void;
    onUpdate?: (value: any) => void;
    onRender?: () => void;
    onLoop?: () => void;
    duration: number;
    autoplay: boolean | undefined;
    delay: number;
    ease: EasingFunction | EasingFunction[] | import("animejs").Spring | undefined;
    loop: number | undefined;
    alternate: boolean;
    reversed: boolean;
    loopDelay: number;
};
export declare const mapTransitionToGSAP: (mercuryTransition?: AnimationTransition, callbacks?: AnimationCallbacks) => {
    onBegin?: () => void;
    onComplete?: () => void;
    onUpdate?: (value: any) => void;
    onRender?: () => void;
    onLoop?: () => void;
    duration: number;
    delay: number;
    ease: string | undefined;
    repeat: number | undefined;
    reversed: boolean;
    yoyo: boolean;
    repeatDelay: number | undefined;
};
export declare function mapToGSAPEasing(easing?: EasingFunction | EasingFunction[]): string | undefined;
