[
  {
    "title": "Getting Started",
    "description": "Seamlessly integrate your favorite animation libraries (Motion, AnimeJS, GSAP) into your Svelte projects using Mercury.",
    "path": "getting-started",
    "content": "<script>\n\timport { Callout } from \"@svecodocs/kit\";\n</script>\n<p>The following guide will walk you through the process of installing Mercury.</p>\n<h2>Installation</h2>\n<p>You can easily install Mercury with npm or your preferred package manager:</p>\n<pre><code class=\"language-bash\">npm install @omicrxn/mercury\n</code></pre>\n<h2>Animating Elements</h2>\n<p>Mercury leverages Svelte Attachments to provide intuitive animation handling. Here’s a basic example demonstrating its usage:</p>\n<h3>Explanation</h3>\n<ul>\n<li><code>{@attach mercury()}</code>: Attaches Mercury’s animation functionality to your element.</li>\n<li><code>animate: { scale: 1 }</code>:  Defines the target scale of the element, animating it to its full size.</li>\n<li><code>transition: { ease: 'circInOut', duration: 1 }</code>: Configures the animation with a smooth easing function (circInOut) and a duration of 1 second.</li>\n</ul>",
    "raw": "<script>\n\timport { Callout } from \"@svecodocs/kit\";\n</script>\n\nThe following guide will walk you through the process of installing Mercury.\n\n## Installation\n\nYou can easily install Mercury with npm or your preferred package manager:\n\n\n```bash\nnpm install @omicrxn/mercury\n```\n\n## Animating Elements\n\nMercury leverages Svelte Attachments to provide intuitive animation handling. Here’s a basic example demonstrating its usage:\n\n<!-- Basic Animation here -->\n\n### Explanation\n\n- `{@attach mercury()}`: Attaches Mercury’s animation functionality to your element.\n- `animate: { scale: 1 }`:  Defines the target scale of the element, animating it to its full size.\n- `transition: { ease: 'circInOut', duration: 1 }`: Configures the animation with a smooth easing function (circInOut) and a duration of 1 second.",
    "toc": [
      {
        "title": "Installation",
        "url": "#installation",
        "items": []
      },
      {
        "title": "Animating Elements",
        "url": "#animating-elements",
        "items": [
          {
            "title": "Explanation",
            "url": "#explanation",
            "items": []
          }
        ]
      }
    ],
    "section": "Overview",
    "slug": "getting-started",
    "slugFull": "/getting-started"
  },
  {
    "title": "Introduction",
    "description": "What is Mercury?",
    "path": "index",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<p>After spending countless hours building documentation sites for various projects, we decided to build a docs package/starter template that we can use for future projects. This project is a result of that effort.</p>\n<p>Svecodocs is a starting point/utility library for building documentation sites under the <a href=\"https://github.com/svecosystem\">Svecosystem</a> umbrella. The code is open source, but it's built and maintained for our own specific needs, so we won't be accepting any public feature requests.</p>\n<p>You are more than welcome to fork the project and customize it to your own needs.</p>\n<h2>Features</h2>\n<ul>\n<li><strong>Markdown-based docs</strong>. Write docs using Markdown and Svelte components</li>\n<li><strong>Light and dark mode</strong>. Toggle between light and dark mode</li>\n<li><strong>Syntax highlighting</strong>. Code blocks are automatically highlighted</li>\n<li><strong>SEO-friendly</strong>. Meta tags and Open Graph support out of the box</li>\n<li><strong>Pre-built components</strong>. Tabs, callouts, and more to use within the documentation</li>\n<li><strong>Custom unified plugins</strong>. Custom remark and rehype plugins to give more flexibility over the rendered HTML</li>\n<li><strong>shadcn-svelte</strong>. Beautifully designed Svelte components</li>\n<li><strong>Tailwind v4</strong>. Tailwind CSS v4 is used for styling</li>\n</ul>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n\nAfter spending countless hours building documentation sites for various projects, we decided to build a docs package/starter template that we can use for future projects. This project is a result of that effort.\n\nSvecodocs is a starting point/utility library for building documentation sites under the [Svecosystem](https://github.com/svecosystem) umbrella. The code is open source, but it's built and maintained for our own specific needs, so we won't be accepting any public feature requests.\n\nYou are more than welcome to fork the project and customize it to your own needs.\n\n## Features\n\n- **Markdown-based docs**. Write docs using Markdown and Svelte components\n- **Light and dark mode**. Toggle between light and dark mode\n- **Syntax highlighting**. Code blocks are automatically highlighted\n- **SEO-friendly**. Meta tags and Open Graph support out of the box\n- **Pre-built components**. Tabs, callouts, and more to use within the documentation\n- **Custom unified plugins**. Custom remark and rehype plugins to give more flexibility over the rendered HTML\n- **shadcn-svelte**. Beautifully designed Svelte components\n- **Tailwind v4**. Tailwind CSS v4 is used for styling",
    "toc": [
      {
        "title": "Features",
        "url": "#features",
        "items": []
      }
    ],
    "section": "Overview",
    "slug": "index",
    "slugFull": "/index"
  },
  {
    "title": "Animate",
    "description": "Easily animate your Svelte components using Mercury",
    "path": "api/animate",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<h2>Overview</h2>\n<p>The <code>animate</code> property lets you control animations applied to your components with Mercury.</p>\n<h3>Usage</h3>\n<p>Include the <code>animate</code> property within the <code>mercury()</code> attachment like this:</p>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\tanimate: { scale: 2, x: 50 }\n\t})}\n/>\n</code></pre>\n<h2>Supported Features</h2>\n<p>Mercury supports animations from popular engines like GSAP, Motion, and AnimeJS. To explore detailed capabilities, check your chosen engine’s documentation:</p>\n<ul>\n<li><a href=\"https://gsap.com/docs/v3/GSAP/gsap.to()/\">GSAP Docs</a></li>\n<li><a href=\"https://motion.dev/docs/animate\">Motion Docs</a></li>\n<li><a href=\"https://animejs.com/documentation/animation/\">Anime Docs</a></li>\n</ul>\n<h2>Stagger</h2>\n<p>Instead of using stagger functions from the animation libraries, Mercury simplifies staggering animations by individually delaying elements:</p>\n<pre><code class=\"language-svelte\">{#each { length: 3 }, i}\n\t&#x3C;div\n\t\t{@attach mercury({\n\t\t\tanimate: { opacity: 1, y: [64, 0] },\n\t\t\ttransition: { delay: i * 0.05 } //use the index to target the element delayed.\n\t\t})}\n\t/>\n{/each}\n</code></pre>\n<h2>Keyframes</h2>\n<p>Mercury supports keyframe animations by providing arrays of values:</p>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\tanimate: { y: [64, 0] } // will be animated to y: 64 and then to y:0\n\t})}\n/>\n</code></pre>\n<h2>Transition</h2>\n<p>Control the animation’s transition properties (duration, easing, repeat) with the transition parameter:</p>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\tanimate: { scale: 1.5 },\n\t\ttransition: { ease: 'circInOut', duration: 1, delay: 0.3 }\n\t})}\n/>\n</code></pre>\n<h2>Easing</h2>\n<p>Easings control animation pacing, enhancing visual appeal. Mercury provides these built-in easings:</p>\n<ul>\n<li><code>linear</code>, <code>easeIn</code>, <code>easeOut</code>, <code>easeInOut</code></li>\n<li><code>circIn</code>, <code>circOut</code>,<code>circInOut</code></li>\n<li><code>backIn</code>, <code>backOut</code>, <code>backInOut</code></li>\n<li><code>anticipate</code>\nAdditionally, you can use custom easing functions provided by your selected animation library.</li>\n</ul>\n<h2>Repetition</h2>\n<p>Control how animations repeat with these parameters:</p>\n<ul>\n<li><code>repeat</code>: Number of repetitions (<code>Infinity</code> supported).</li>\n<li><code>repeatType</code>: <code>loop</code>, <code>reverese</code> or <code>mirror</code></li>\n<li><code>repeatDelay</code>: Delay in seconds between repetitions.</li>\n</ul>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\tanimate: {\n\t\t\tbackgroundColor: ['#ff0088', '#0d63f8']\n\t\t},\n\t\ttransition: {\n\t\t\tduration: 2,\n\t\t\trepeat: Infinity,\n\t\t\trepeatType: 'reverse',\n\t\t\teasing: 'linear'\n\t\t}\n\t})}\n>\n</code></pre>\n<h2>Springs</h2>\n<p>Spring-based animations mimic physical springs, often providing the most natural animation experience:</p>\n<pre><code class=\"language-svelte\">&#x3C;div\n\tclass=\"box h-16 w-16 rounded-md border border-slate-500 bg-blue-200\"\n\t{@attach mercury({\n\t\tanimate: { rotate: 90 },\n\t\ttransition: { type: 'spring', repeat: Infinity, repeatDelay: 0.2 }\n\t})}\n/>\n</code></pre>\n<p>Customize springs with</p>\n<ul>\n<li>\n<p><code>bounce</code>: Controls spring bounce intensity.</p>\n</li>\n<li>\n<p><code>damping</code>: Adjusts resistance force.</p>\n</li>\n<li>\n<p><code>mass</code>: Sets the mass of the animated object.</p>\n</li>\n<li>\n<p><code>stiffness</code>: Defines spring stiffness.</p>\n</li>\n<li>\n<p><code>velocity</code>: Sets initial spring velocity.</p>\n</li>\n</ul>\n<callout type=\"note\" title=\"Note\">\n    Parameters might behave differently depending on the chosen animation library. Refer to its documentation for specific behaviors.\n</callout>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n## Overview\nThe `animate` property lets you control animations applied to your components with Mercury.\n\n\n### Usage\n\nInclude the `animate` property within the `mercury()` attachment like this:\n\n```svelte\n<div\n\t{@attach mercury({\n\t\tanimate: { scale: 2, x: 50 }\n\t})}\n/>\n```\n\n## Supported Features\n\nMercury supports animations from popular engines like GSAP, Motion, and AnimeJS. To explore detailed capabilities, check your chosen engine’s documentation:\n- [GSAP Docs](https://gsap.com/docs/v3/GSAP/gsap.to()/)\n- [Motion Docs](https://motion.dev/docs/animate)\n- [Anime Docs](https://animejs.com/documentation/animation/)\n\n## Stagger\nInstead of using stagger functions from the animation libraries, Mercury simplifies staggering animations by individually delaying elements:\n```svelte\n{#each { length: 3 }, i}\n\t<div\n\t\t{@attach mercury({\n\t\t\tanimate: { opacity: 1, y: [64, 0] },\n\t\t\ttransition: { delay: i * 0.05 } //use the index to target the element delayed.\n\t\t})}\n\t/>\n{/each}\n```\n\n## Keyframes\nMercury supports keyframe animations by providing arrays of values:\n\n```svelte\n<div\n\t{@attach mercury({\n\t\tanimate: { y: [64, 0] } // will be animated to y: 64 and then to y:0\n\t})}\n/>\n```\n\n## Transition\nControl the animation’s transition properties (duration, easing, repeat) with the transition parameter:\n```svelte\n<div\n\t{@attach mercury({\n\t\tanimate: { scale: 1.5 },\n\t\ttransition: { ease: 'circInOut', duration: 1, delay: 0.3 }\n\t})}\n/>\n```\n\n## Easing\nEasings control animation pacing, enhancing visual appeal. Mercury provides these built-in easings:\n\n- `linear`, `easeIn`, `easeOut`, `easeInOut`\n- `circIn`, `circOut`,`circInOut`\n- `backIn`, `backOut`, `backInOut`\n- `anticipate`\nAdditionally, you can use custom easing functions provided by your selected animation library.\n\n## Repetition\nControl how animations repeat with these parameters:\n\n- `repeat`: Number of repetitions (`Infinity` supported).\n- `repeatType`: `loop`, `reverese` or `mirror`\n- `repeatDelay`: Delay in seconds between repetitions.\n\n```svelte\n<div\n\t{@attach mercury({\n\t\tanimate: {\n\t\t\tbackgroundColor: ['#ff0088', '#0d63f8']\n\t\t},\n\t\ttransition: {\n\t\t\tduration: 2,\n\t\t\trepeat: Infinity,\n\t\t\trepeatType: 'reverse',\n\t\t\teasing: 'linear'\n\t\t}\n\t})}\n>\n```\n\n## Springs\nSpring-based animations mimic physical springs, often providing the most natural animation experience:\n\n```svelte\n<div\n\tclass=\"box h-16 w-16 rounded-md border border-slate-500 bg-blue-200\"\n\t{@attach mercury({\n\t\tanimate: { rotate: 90 },\n\t\ttransition: { type: 'spring', repeat: Infinity, repeatDelay: 0.2 }\n\t})}\n/>\n```\nCustomize springs with\n\n- `bounce`: Controls spring bounce intensity.\n\n- `damping`: Adjusts resistance force.\n\n- `mass`: Sets the mass of the animated object.\n\n- `stiffness`: Defines spring stiffness.\n\n- `velocity`: Sets initial spring velocity.\n\n<Callout type=\"note\" title=\"Note\">\n    Parameters might behave differently depending on the chosen animation library. Refer to its documentation for specific behaviors.\n</Callout>",
    "toc": [
      {
        "title": "Overview",
        "url": "#overview",
        "items": [
          {
            "title": "Usage",
            "url": "#usage",
            "items": []
          }
        ]
      },
      {
        "title": "Supported Features",
        "url": "#supported-features",
        "items": []
      },
      {
        "title": "Stagger",
        "url": "#stagger",
        "items": []
      },
      {
        "title": "Keyframes",
        "url": "#keyframes",
        "items": []
      },
      {
        "title": "Transition",
        "url": "#transition",
        "items": []
      },
      {
        "title": "Easing",
        "url": "#easing",
        "items": []
      },
      {
        "title": "Repetition",
        "url": "#repetition",
        "items": []
      },
      {
        "title": "Springs",
        "url": "#springs",
        "items": []
      }
    ],
    "section": "API",
    "slug": "api/animate",
    "slugFull": "/api/animate"
  },
  {
    "title": "Engines",
    "description": "Learn how to select, configure, and use animation engines with Mercury, and discover the enhanced capabilities Mercury provides.",
    "path": "api/engines",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<h2>Overview</h2>\n<p>Mercury supports multiple animation engines, allowing you to select your preferred library—<em>Motion</em> (default), <em>GSAP</em>, or <em>AnimeJS</em>—and enrich their capabilities with additional features like gestures, layout animations, and presence animations.</p>\n<h2>Extended Functionality</h2>\n<p>In addition to the core functionalities provided by these libraries, Mercury offers unified, engine-agnostic features, including:</p>\n<ul>\n<li>\n<p><em>Gestures</em></p>\n</li>\n<li>\n<p><em>Layout Animations</em></p>\n</li>\n<li>\n<p><em>Presence (Enter/Exit Animations)</em>\nThese features ensure consistency across different animation libraries.</p>\n</li>\n</ul>\n<callout type=\"note\" title=\"Community Contributions\">\n    Additional engine adapters are welcome! Feel free to contribute support for other animation libraries.\n</callout>\n<h2>Selecting an Engine</h2>\n<p>By default, Mercury utilizes GSAP. To explicitly choose a different engine, use the engine parameter:</p>\n<pre><code class=\"language-svelte\">import {mercury, AnimeEngine} from '@omicrxn/mercury';\n\n&#x3C;div\n\t{@attach mercury({\n\t\tengine: AnimeEngine\n\t})}\n/>\n</code></pre>\n<p>Available engine indentifiers:</p>\n<ul>\n<li><code>GSAPEngine</code></li>\n<li><code>MotionEngine</code> (default)</li>\n<li><code>AnimeEngine</code></li>\n</ul>\n<h2>Unified API</h2>\n<p>Mercury simplifies the animation workflow by providing a consistent API across all supported engines. This means uniform naming conventions and parameters, reducing complexity and making it easy to switch between engines without needing to learn multiple APIs.</p>\n<p>For instance, some libraries use <code>loop</code> while others use <code>repeat</code>; Mercury standardizes these differences to ensure a smoother development experience.</p>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n## Overview\nMercury supports multiple animation engines, allowing you to select your preferred library—*Motion* (default), *GSAP*, or *AnimeJS*—and enrich their capabilities with additional features like gestures, layout animations, and presence animations.\n\n## Extended Functionality\n\n\nIn addition to the core functionalities provided by these libraries, Mercury offers unified, engine-agnostic features, including:\n\n- *Gestures*\n\n- *Layout Animations*\n\n- *Presence (Enter/Exit Animations)*\nThese features ensure consistency across different animation libraries.\n\n<Callout type=\"note\" title=\"Community Contributions\">\n    Additional engine adapters are welcome! Feel free to contribute support for other animation libraries.\n</Callout>\n\n## Selecting an Engine\nBy default, Mercury utilizes GSAP. To explicitly choose a different engine, use the engine parameter:\n\n```svelte\nimport {mercury, AnimeEngine} from '@omicrxn/mercury';\n\n<div\n\t{@attach mercury({\n\t\tengine: AnimeEngine\n\t})}\n/>\n```\nAvailable engine indentifiers:\n\n- `GSAPEngine`\n- `MotionEngine` (default)\n- `AnimeEngine`\n\n## Unified API\nMercury simplifies the animation workflow by providing a consistent API across all supported engines. This means uniform naming conventions and parameters, reducing complexity and making it easy to switch between engines without needing to learn multiple APIs.\n\nFor instance, some libraries use `loop` while others use `repeat`; Mercury standardizes these differences to ensure a smoother development experience.",
    "toc": [
      {
        "title": "Overview",
        "url": "#overview",
        "items": []
      },
      {
        "title": "Extended Functionality",
        "url": "#extended-functionality",
        "items": []
      },
      {
        "title": "Selecting an Engine",
        "url": "#selecting-an-engine",
        "items": []
      },
      {
        "title": "Unified API",
        "url": "#unified-api",
        "items": []
      }
    ],
    "section": "API",
    "slug": "api/engines",
    "slugFull": "/api/engines"
  },
  {
    "title": "Gestures",
    "description": "Learn how to easily implement interactive gesture and scroll-based animations with Mercury.",
    "path": "api/gestures",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<h2>Overview</h2>\n<p>Mercury provides robust support for interactive gesture and scroll-triggered animations, making it easy to enrich user experiences in your Svelte applications. Below, you’ll find detailed explanations and practical examples focusing on hover, tap, and scroll animations.</p>\n<p>All gesture animations described below (<code>hover</code>, <code>tap</code>, and <code>scroll</code>) have their own independent <code>transition</code>. Additionally, the <code>scroll</code> animation supports extra parameters such as <code>root</code>, <code>margin</code>, and <code>amount</code>. If you don’t provide a specific <code>transition</code>, Mercury will use the default <code>transition</code> settings.</p>\n<h2>Gesture Animations</h2>\n<p>Gesture animations respond dynamically to user interactions such as hovering or tapping, providing immediate visual feedback that enhances interactivity.</p>\n<h2>Hover</h2>\n<p>Hover animations activate when a user moves their cursor over an element, creating intuitive and visually appealing interactions.</p>\n<ul>\n<li><code>onHoverStart</code>: function that runs when the mouse starts hovering the element.</li>\n<li><code>onHoverEnd</code>: function that runs when the mouse goes outside the element.</li>\n<li><code>whileHover</code>: animation run when the element is hovered.</li>\n</ul>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\tanimate: { scale: 0.3 }, //since exit is not defined, this will be the exit\n\t\twhileHover: {\n\t\t\tscale: 1.25,\n\t\t\ttransition: { duration: 0.5, type: 'spring', stiffness: 150, damping: 20 }\n\t\t},\n\t\ttransition: { ease: 'circInOut', duration: 1 }\n\t})}\n/>\n</code></pre>\n<h2>Tap</h2>\n<p>Tap animations trigger on user click or touch interactions, creating engaging feedback that enhances tactile experiences.</p>\n<ul>\n<li><code>onTapStart</code>: function that runs when the mouse clicks the element.</li>\n<li><code>onTapEnd</code>: function that runs when the click is up.</li>\n<li><code>whileTap</code>: animation run when the element is tapped.</li>\n</ul>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\twhileTap: {\n\t\t\tscale: 0.5,\n\t\t\ttransition: { duration: 0.5, type: 'spring', stiffness: 200, damping: 15 }\n\t\t},\n\t\ttransition: { ease: 'circInOut', duration: 1 }\n\t})}\n/>\n</code></pre>\n<h2>Scroll</h2>\n<p>Scroll-triggered animations activate as elements enter or leave the viewport, enhancing the visual flow and interactivity of content on scroll.</p>\n<ul>\n<li><code>enter</code>: animation that runs when the element goes into view.</li>\n<li><code>exit</code>: animation that runs when the element exists the root.</li>\n<li><code>root</code>: element to be used as scroll viewport.</li>\n</ul>\n<pre><code class=\"language-svelte\">&#x3C;div\n\t{@attach mercury({\n\t\tscroll: {\n\t\t\tenter: { x: 150, rotate: 180 },\n\t\t\texit: { x: 0, rotate: 0 },\n\t\t\ttransition: { duration: 1, type: 'spring', stiffness: 100, damping: 10 }\n\t\t},\n\t\ttransition: { ease: 'circInOut', duration: 1 }\n\t})}\n/>\n</code></pre>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n## Overview\nMercury provides robust support for interactive gesture and scroll-triggered animations, making it easy to enrich user experiences in your Svelte applications. Below, you’ll find detailed explanations and practical examples focusing on hover, tap, and scroll animations.\n\nAll gesture animations described below (`hover`, `tap`, and `scroll`) have their own independent `transition`. Additionally, the `scroll` animation supports extra parameters such as `root`, `margin`, and `amount`. If you don’t provide a specific `transition`, Mercury will use the default `transition` settings.\n\n## Gesture Animations\nGesture animations respond dynamically to user interactions such as hovering or tapping, providing immediate visual feedback that enhances interactivity.\n\n## Hover\nHover animations activate when a user moves their cursor over an element, creating intuitive and visually appealing interactions.\n\n- `onHoverStart`: function that runs when the mouse starts hovering the element.\n- `onHoverEnd`: function that runs when the mouse goes outside the element.\n- `whileHover`: animation run when the element is hovered.\n\n```svelte\n<div\n\t{@attach mercury({\n\t\tanimate: { scale: 0.3 }, //since exit is not defined, this will be the exit\n\t\twhileHover: {\n\t\t\tscale: 1.25,\n\t\t\ttransition: { duration: 0.5, type: 'spring', stiffness: 150, damping: 20 }\n\t\t},\n\t\ttransition: { ease: 'circInOut', duration: 1 }\n\t})}\n/>\n```\n\n## Tap\nTap animations trigger on user click or touch interactions, creating engaging feedback that enhances tactile experiences.\n\n- `onTapStart`: function that runs when the mouse clicks the element.\n- `onTapEnd`: function that runs when the click is up.\n- `whileTap`: animation run when the element is tapped.\n```svelte\n<div\n\t{@attach mercury({\n\t\twhileTap: {\n\t\t\tscale: 0.5,\n\t\t\ttransition: { duration: 0.5, type: 'spring', stiffness: 200, damping: 15 }\n\t\t},\n\t\ttransition: { ease: 'circInOut', duration: 1 }\n\t})}\n/>\n```\n\n\n## Scroll\nScroll-triggered animations activate as elements enter or leave the viewport, enhancing the visual flow and interactivity of content on scroll.\n- `enter`: animation that runs when the element goes into view.\n- `exit`: animation that runs when the element exists the root.\n- `root`: element to be used as scroll viewport.\n\n```svelte\n<div\n\t{@attach mercury({\n\t\tscroll: {\n\t\t\tenter: { x: 150, rotate: 180 },\n\t\t\texit: { x: 0, rotate: 0 },\n\t\t\ttransition: { duration: 1, type: 'spring', stiffness: 100, damping: 10 }\n\t\t},\n\t\ttransition: { ease: 'circInOut', duration: 1 }\n\t})}\n/>\n```",
    "toc": [
      {
        "title": "Overview",
        "url": "#overview",
        "items": []
      },
      {
        "title": "Gesture Animations",
        "url": "#gesture-animations",
        "items": []
      },
      {
        "title": "Hover",
        "url": "#hover",
        "items": []
      },
      {
        "title": "Tap",
        "url": "#tap",
        "items": []
      },
      {
        "title": "Scroll",
        "url": "#scroll",
        "items": []
      }
    ],
    "section": "API",
    "slug": "api/gestures",
    "slugFull": "/api/gestures"
  },
  {
    "title": "Layout Animations",
    "description": "Enhance your UI transitions with powerful layout animations using Mercury.",
    "path": "api/layout-animations",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<h2>Overview</h2>\n<p>Layout animations enable you to animate properties and scenarios typically not supported by standard CSS animations. While standard animations effectively animate individual properties like opacity or scale, they can’t handle structural changes—such as switching flex-direction, updating grid-template-columns, or smoothly animating between two separate elements. Mercury’s layout animations effortlessly manage these complex cases.</p>\n<h2>Basic Usage</h2>\n<p>Use Mercury’s layout attachment independently or along the main Mercury attachment:</p>\n<pre><code class=\"language-svelte\">&#x3C;div style=\"justify-content: {justify};\">\n\t&#x3C;div\n\t\t{@attach layout({ track: () => justify })}\n\t\tclass=\"box h-16 w-16 rounded-md border border-slate-500 bg-blue-200\"\n\t/>\n&#x3C;/div>\n&#x3C;button\n\tonclick={() => {\n\t\tflip(); //this toggles the parent element between justify-start and justify-end\n\t}}\n\tclass=\"bg-slate-200\">Flip&#x3C;/button\n>\n</code></pre>\n<callout type=\"warning\" title=\"Important Notes\">\n\tSvelte lacks automatic DOM change detection. And Mercury is created from the idea that it should be built upong Svelte core features and working in HTML Elements rather than having wrapper components. Thus, you must explicitly provide a state reference via the track parameter to trigger layout animations.\n</callout>\n<h2>Layout ID (Shared Layout Animations)</h2>\n<p>To animate between two different elements, use the same layoutId in Mercury’s layout attachment. This smoothly transitions one element to another when state changes:</p>\n<pre><code class=\"language-svelte\">{#if toggle}\n\t&#x3C;div\n\t\tbind:this={smallBox}\n\t\t{@attach layout({ layoutId: 'test', track: () => toggle })}\n\t\tclass=\"box h-16 w-16 rounded-md border border-slate-500 bg-blue-200\"\n\t>&#x3C;/div>\n{:else}\n\t&#x3C;div\n\t\tbind:this={bigBox}\n\t\t{@attach layout({ layoutId: 'test', track: () => toggle })}\n\t\tclass=\"box h-24 w-24 rounded-md border border-slate-500 bg-blue-200\"\n\t>&#x3C;/div>\n{/if}\n</code></pre>\n<p>Both elements share the layoutId (test), enabling seamless and visually appealing transitions between the states.</p>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n## Overview\nLayout animations enable you to animate properties and scenarios typically not supported by standard CSS animations. While standard animations effectively animate individual properties like opacity or scale, they can’t handle structural changes—such as switching flex-direction, updating grid-template-columns, or smoothly animating between two separate elements. Mercury’s layout animations effortlessly manage these complex cases.\n\n\n\n## Basic Usage\n\nUse Mercury’s layout attachment independently or along the main Mercury attachment:\n\n```svelte\n<div style=\"justify-content: {justify};\">\n\t<div\n\t\t{@attach layout({ track: () => justify })}\n\t\tclass=\"box h-16 w-16 rounded-md border border-slate-500 bg-blue-200\"\n\t/>\n</div>\n<button\n\tonclick={() => {\n\t\tflip(); //this toggles the parent element between justify-start and justify-end\n\t}}\n\tclass=\"bg-slate-200\">Flip</button\n>\n```\n<Callout type=\"warning\" title=\"Important Notes\">\n\tSvelte lacks automatic DOM change detection. And Mercury is created from the idea that it should be built upong Svelte core features and working in HTML Elements rather than having wrapper components. Thus, you must explicitly provide a state reference via the track parameter to trigger layout animations.\n</Callout>\n\n## Layout ID (Shared Layout Animations)\nTo animate between two different elements, use the same layoutId in Mercury’s layout attachment. This smoothly transitions one element to another when state changes:\n```svelte\n{#if toggle}\n\t<div\n\t\tbind:this={smallBox}\n\t\t{@attach layout({ layoutId: 'test', track: () => toggle })}\n\t\tclass=\"box h-16 w-16 rounded-md border border-slate-500 bg-blue-200\"\n\t></div>\n{:else}\n\t<div\n\t\tbind:this={bigBox}\n\t\t{@attach layout({ layoutId: 'test', track: () => toggle })}\n\t\tclass=\"box h-24 w-24 rounded-md border border-slate-500 bg-blue-200\"\n\t></div>\n{/if}\n```\nBoth elements share the layoutId (test), enabling seamless and visually appealing transitions between the states.",
    "toc": [
      {
        "title": "Overview",
        "url": "#overview",
        "items": []
      },
      {
        "title": "Basic Usage",
        "url": "#basic-usage",
        "items": []
      },
      {
        "title": "Layout ID (Shared Layout Animations)",
        "url": "#layout-id-shared-layout-animations",
        "items": []
      }
    ],
    "section": "API",
    "slug": "api/layout-animations",
    "slugFull": "/api/layout-animations"
  },
  {
    "title": "Presence (Enter / Exit)",
    "description": "Effortlessly animate component mounting and unmounting using Mercury's presence features.",
    "path": "api/presence",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<h2>Overview</h2>\n<p>Mercury simplifies animating component entrances and exits, leveraging Svelte’s powerful transitions while reducing manual overhead. Unlike typical implementations where you wrap elements with specialized components, Mercury utilizes Svelte transitions directly, providing seamless integration and intuitive behavior out-of-the-box.</p>\n<h2>Enter animations</h2>\n<p>By default, Mercury animates from the element’s current style to the defined <code>animate</code> parameters, providing immediate entry animations. However, in scenarios where explicit control over initial states is required—particularly if you need different behaviors between initial render and subsequent renders—you can manually handle these styles.</p>\n<h3>Author Notes on Svelte Limitations:</h3>\n<callout>\n    Initially, the goal was to allow explicit initial styles directly within Mercury. However, there were two primary limitations with Svelte:\n    1. No First Render Control: Svelte does not currently provide a built-in mechanism to conditionally run intro transitions on the first render (see this issue)\n    2. Attachments Limitation: Styles cannot be applied via attachments before the component mounts, limiting pre-mount initialization capabilities. Due to these limitations, a manual workaround is necessary, as demonstrated below:\n</callout>\n<p>Mercury by default animates from the element style to the <code>animate</code> parameters. So you already get enter animations out of the box, however there are scenarios where explicitly note the <code>initial</code> styles so that Mercury animates from <code>initial</code> to <code>animate</code> parameters might be useful. The main example is if you want to have the default styles apply on the first run but then on the next ones go from <code>initial</code> to <code>animate</code>. The first thought was that like Exit animations that would be handled by <code>in:</code> transitions but Svelte doesn’t allow the ability to chose if they run on first render or not . The second thought was to apply the <code>initial</code> styles before the component mounts but that can’t be done in attachments as far as I’m concerned. So right now Enter animations are only from the element styles to <code>animate</code>. However if you need to have initial animation disabled on first render this is a solution:</p>\n<h3>Disabling Initial Animation on First Render</h3>\n<p>Here’s how to disable animations on the initial render but apply them subsequently:</p>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { presence, mercury } from '$lib/index.js';\n\timport { onMount, untrack } from 'svelte';\n\tlet initial = $state(false);\n\tonMount(() => {\n\t\tinitial = true;\n\t});\n&#x3C;/script>\n\n&#x3C;span\n\tclass=\"opacity-0\"\n\tstyle={untrack(() => initial) ? 'transform:translateY(-25px)' : ''}\n\t{@attach mercury({\n\t\tanimate: { opacity: 1, y: 0 },\n\t\ttransition: { type: 'spring', duration: 1, bounce: 0 }\n\t})}\n>\n\tExample\n&#x3C;/span>\n\n</code></pre>\n<h4>Explanation:</h4>\n<ul>\n<li>\n<p>The span doesn’t animate initially.</p>\n</li>\n<li>\n<p>After the first render, subsequent renders animate smoothly from y: <code>-25px</code> to <code>y: 0px</code>.</p>\n</li>\n</ul>\n<h2>Exit Animations</h2>\n<p>Mercury provides smooth exit animations through its custom <code>presence</code> transition. Simply use it with Svelte’s built-in <code>out</code>: directive:</p>\n<pre><code class=\"language-svelte\">{#if show}\n\t&#x3C;span\n\t\tclass=\"opacity-0\"\n\t\tstyle={untrack(() => initial) ? 'transform:translateY(-25px)' : ''}\n\t\t{@attach mercury({\n\t\t\tanimate: { opacity: 1, y: 0 },\n\t\t\ttransition: { type: 'spring', duration: 1, bounce: 0 }\n\t\t})}\n\t\tout:presence={{ opacity: 0, y: 25, popLayout: true, transition: { duration: 0.15 } }}\n\t>\n\t\tExample\n\t&#x3C;/span>\n{/if}\n</code></pre>\n<h4>Explanation:</h4>\n<ul>\n<li>\n<p><code>out:presence</code>: Defines exit animations explicitly.</p>\n</li>\n<li>\n<p>Parameters (<code>opacity</code>, <code>y</code>) specify the exit state of the animation.</p>\n</li>\n<li>\n<p>The <code>transition</code> parameter customizes duration and easing behavior.</p>\n</li>\n</ul>\n<h3>Exit Modes (<code>sync</code>, <code>wait</code> and <code>popLayout</code>)</h3>\n<p>If you are familiar with Motion, you will know that it has 3 main exit modes. While not as advanced as Motion’s.</p>\n<p>Quoting <a href=\"https://motion.dev/docs/react-animate-presence#mode\">Motion’s documentation</a></p>\n<blockquote>\n<ul>\n<li>“sync”: Children animate in/out as soon as they’re added/removed.</li>\n<li>“wait”: The entering child will wait until the exiting child has animated out. Note: Currently only renders a single child at a time.</li>\n<li>“popLayout”: Exiting children will be “popped” out of the page layout. This allows surrounding elements to move to their new layout immediately.</li>\n</ul>\n</blockquote>\n<p><code>sync</code> is the default behaviour in Mercury, but as you will notice. As you can see in the example above <code>popLayout</code> is a boolean parameter in the transition. So what happens with <code>wait</code>? Well as per Svelte documentation that behaviour is accomplished by default by wrapping the element in a <code>{#key }</code> block. So by leaving the transition by default, iff the element is wrapped by a <code>{#key }</code> block the behaviour will be Motion’s <code>wait</code>, but if it isn’t the behaviour will be Motion’s <code>sync</code>.</p>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n## Overview\nMercury simplifies animating component entrances and exits, leveraging Svelte’s powerful transitions while reducing manual overhead. Unlike typical implementations where you wrap elements with specialized components, Mercury utilizes Svelte transitions directly, providing seamless integration and intuitive behavior out-of-the-box.\n\n## Enter animations\nBy default, Mercury animates from the element’s current style to the defined `animate` parameters, providing immediate entry animations. However, in scenarios where explicit control over initial states is required—particularly if you need different behaviors between initial render and subsequent renders—you can manually handle these styles.\n### Author Notes on Svelte Limitations:\n<Callout>\n    Initially, the goal was to allow explicit initial styles directly within Mercury. However, there were two primary limitations with Svelte:\n    1. No First Render Control: Svelte does not currently provide a built-in mechanism to conditionally run intro transitions on the first render (see this issue)\n    2. Attachments Limitation: Styles cannot be applied via attachments before the component mounts, limiting pre-mount initialization capabilities. Due to these limitations, a manual workaround is necessary, as demonstrated below:\n\n</Callout>\n\nMercury by default animates from the element style to the `animate` parameters. So you already get enter animations out of the box, however there are scenarios where explicitly note the `initial` styles so that Mercury animates from `initial` to `animate` parameters might be useful. The main example is if you want to have the default styles apply on the first run but then on the next ones go from `initial` to `animate`. The first thought was that like Exit animations that would be handled by `in:` transitions but Svelte doesn’t allow the ability to chose if they run on first render or not . The second thought was to apply the `initial` styles before the component mounts but that can’t be done in attachments as far as I’m concerned. So right now Enter animations are only from the element styles to `animate`. However if you need to have initial animation disabled on first render this is a solution:\n\n### Disabling Initial Animation on First Render\nHere’s how to disable animations on the initial render but apply them subsequently:\n\n```svelte\n<script lang=\"ts\">\n\timport { presence, mercury } from '$lib/index.js';\n\timport { onMount, untrack } from 'svelte';\n\tlet initial = $state(false);\n\tonMount(() => {\n\t\tinitial = true;\n\t});\n</script>\n\n<span\n\tclass=\"opacity-0\"\n\tstyle={untrack(() => initial) ? 'transform:translateY(-25px)' : ''}\n\t{@attach mercury({\n\t\tanimate: { opacity: 1, y: 0 },\n\t\ttransition: { type: 'spring', duration: 1, bounce: 0 }\n\t})}\n>\n\tExample\n</span>\n\n```\n#### Explanation:\n- The span doesn’t animate initially.\n\n- After the first render, subsequent renders animate smoothly from y: `-25px` to `y: 0px`.\n\n## Exit Animations\nMercury provides smooth exit animations through its custom `presence` transition. Simply use it with Svelte’s built-in `out`: directive:\n```svelte\n{#if show}\n\t<span\n\t\tclass=\"opacity-0\"\n\t\tstyle={untrack(() => initial) ? 'transform:translateY(-25px)' : ''}\n\t\t{@attach mercury({\n\t\t\tanimate: { opacity: 1, y: 0 },\n\t\t\ttransition: { type: 'spring', duration: 1, bounce: 0 }\n\t\t})}\n\t\tout:presence={{ opacity: 0, y: 25, popLayout: true, transition: { duration: 0.15 } }}\n\t>\n\t\tExample\n\t</span>\n{/if}\n```\n\n#### Explanation:\n- `out:presence`: Defines exit animations explicitly.\n\n- Parameters (`opacity`, `y`) specify the exit state of the animation.\n\n- The `transition` parameter customizes duration and easing behavior.\n\n### Exit Modes (`sync`, `wait` and `popLayout`)\n\nIf you are familiar with Motion, you will know that it has 3 main exit modes. While not as advanced as Motion’s.\n\nQuoting [Motion’s documentation](https://motion.dev/docs/react-animate-presence#mode)\n\n> - “sync”: Children animate in/out as soon as they’re added/removed.\n> - “wait”: The entering child will wait until the exiting child has animated out. Note: Currently only renders a single child at a time.\n> - “popLayout”: Exiting children will be “popped” out of the page layout. This allows surrounding elements to move to their new layout immediately.\n\n`sync` is the default behaviour in Mercury, but as you will notice. As you can see in the example above `popLayout` is a boolean parameter in the transition. So what happens with `wait`? Well as per Svelte documentation that behaviour is accomplished by default by wrapping the element in a `{#key }` block. So by leaving the transition by default, iff the element is wrapped by a `{#key }` block the behaviour will be Motion’s `wait`, but if it isn’t the behaviour will be Motion’s `sync`.",
    "toc": [
      {
        "title": "Overview",
        "url": "#overview",
        "items": []
      },
      {
        "title": "Enter animations",
        "url": "#enter-animations",
        "items": [
          {
            "title": "Author Notes on Svelte Limitations:",
            "url": "#author-notes-on-svelte-limitations",
            "items": []
          },
          {
            "title": "Disabling Initial Animation on First Render",
            "url": "#disabling-initial-animation-on-first-render",
            "items": [
              {
                "title": "Explanation:",
                "url": "#explanation",
                "items": []
              }
            ]
          }
        ]
      },
      {
        "title": "Exit Animations",
        "url": "#exit-animations",
        "items": [
          {
            "title": "Exit Modes (sync, wait and popLayout)",
            "url": "#exit-modes-sync-wait-and-poplayout",
            "items": []
          }
        ]
      }
    ],
    "section": "API",
    "slug": "api/presence",
    "slugFull": "/api/presence"
  }
]